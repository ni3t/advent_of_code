require 'pry'
require 'pry-nav'
require 'ostruct'
require 'set'

# --- Day 8: Resonant Collinearity ---
#
# You find yourselves on the roof of a top-secret Easter Bunny installation.
#
# While The Historians do their thing, you take a look at the familiar huge antenna.
# Much to your surprise, it seems to have been reconfigured to emit a signal that makes
# people 0.1% more likely to buy Easter Bunny brand Imitation Mediocre Chocolate as
# a Christmas gift! Unthinkable!
#
# Scanning across the city, you find that there are actually many such antennas. Each
# antenna is tuned to a specific frequency indicated by a single lowercase letter, uppercase
# letter, or digit. You create a map (your puzzle input) of these antennas. For example:
#
ex1 = <<~T
  ............
  ........0...
  .....0......
  .......0....
  ....0.......
  ......A.....
  ............
  ............
  ........A...
  .........A..
  ............
  ............
T
#
# The signal only applies its nefarious effect at specific antinodes based on the resonant
# frequencies of the antennas. In particular, an antinode occurs at any point that is
# perfectly in line with two antennas of the same frequency - but only when one of the
# antennas is twice as far away as the other. This means that for any pair of antennas
# with the same frequency, there are two antinodes, one on either side of them.
#
# So, for these two antennas with frequency a, they create the two antinodes marked
# with #:
#
ex2 = <<~T
  ..........
  ...#......
  ..........
  ....a.....
  ..........
  .....a....
  ..........
  ......#...
  ..........
  ..........
T
#
# Adding a third antenna with the same frequency creates several more antinodes. It
# would ideally add four antinodes, but two are off the right side of the map, so instead
# it adds only two:
#
ex3 = <<~T
  ..........
  ...#......
  #.........
  ....a.....
  ........a.
  .....a....
  ..#.......
  ......#...
  ..........
  ..........
T
#
# Antennas with different frequencies don't create antinodes; A and a count as different
# frequencies. However, antinodes can occur at locations that contain antennas. In this
# diagram, the lone antenna with frequency capital A creates no antinodes but has a
# lowercase-a-frequency antinode at its location:
#
ex4 = <<~T
  ..........
  ...#......
  #.........
  ....a.....
  ........a.
  .....a....
  ..#.......
  ......A...
  ..........
  ..........
T
#
# The first example has antennas with two different frequencies, so the antinodes they
# create look like this, plus an antinode overlapping the topmost A-frequency antenna:
#
ex5 = <<~T
  ......#....#
  ...#....0...
  ....#0....#.
  ..#....0....
  ....0....#..
  .#....A.....
  ...#........
  #......#....
  ........A...
  .........A..
  ..........#.
  ..........#.
T
#
# Because the topmost A-frequency antenna overlaps with a 0-frequency antinode, there
# are 14 total unique locations that contain an antinode within the bounds of the map.
#
# Calculate the impact of the signal. How many unique locations within the bounds of
# the map contain an antinode?

# --- Part Two ---
#
# Watching over your shoulder as you work, one of The Historians asks if you took the
# effects of resonant harmonics into your calculations.
#
# Whoops!
#
# After updating your model, it turns out that an antinode occurs at any grid position
# exactly in line with at least two antennas of the same frequency, regardless of distance.
# This means that some of the new antinodes will occur at the position of each antenna
# (unless that antenna is the only one of its frequency).
#
# So, these three T-frequency antennas now create many antinodes:
#
ex1 = <<~T
  T....#....
  ...T......
  .T....#...
  .........#
  ..#.......
  ..........
  ...#......
  ..........
  ....#.....
  ..........
T
#
# In fact, the three T-frequency antennas are all exactly in line with two antennas,
# so they are all also antinodes! This brings the total number of antinodes in the above
# example to 9.
#
# The original example now has 34 antinodes, including the antinodes that appear on
# every antenna:
#
ex2 = <<~T
  ##....#....#
  .#.#....0...
  ..#.#0....#.
  ..##...0....
  ....0....#..
  .#...#A....#
  ...#..#.....
  #....#.#....
  ..#.....A...
  ....#....A..
  .#........#.
  ...#......##
T
#
# Calculate the impact of the signal using this updated model. How many unique locations
# within the bounds of the map contain an antinode?

@data = DATA.each_line.map(&:chomp).map(&:freeze).freeze
@ex1 = ex1.each_line.map(&:chomp)

Antenna = Struct.new(:x, :y, :frequency) do
  def to_s
    "#{frequency}(#{x},#{y})"
  end
end
Node = Struct.new(:x, :y, :frequency) do
  def to_s
    "#{frequency}(#{x},#{y})"
  end

  def <=>(other)
    if other.x < x
      1
    elsif other.x > x
      -1
    elsif other.y < y
      1
    elsif other.y > y
      -1
    else
      0
    end
  end

  def inbounds?
    x >= 0 && x <= OOB_RIGHT && y >= 0 && y <= OOB_DOWN
  end
end
Pair = Struct.new(:a, :b) do
  def drop
    a.y - b.y
  end

  def distance
    a.x - b.x
  end

  def nodes
    [Node.new(a.x + distance, a.y + drop, a.frequency),
      Node.new(b.x - distance, b.y - drop, b.frequency)]
  end

  def to_s
    "PAIR #{a.frequency}\nA: #{a}\nB: #{b}\nNodes: #{nodes.join(', ')}"
  end
end

data = @data

MAP = {}
OOB_DOWN = data.size - 1
OOB_RIGHT = data.first.size - 1

data.each.with_index do |line,y|
  line.chars.each.with_index do |char,x|
    next if char == '.'
    MAP[char] ||= []
    MAP[char] << Antenna.new(x, y, char) 
  end
end

nodes = Set.new 

MAP.each do |freq, antennas|
  antennas.combination(2).each do |a, b|
    pair = Pair.new(a, b)
    pair.nodes.each do |node|
      nodes << node if node.inbounds?
    end
  end
end

puts nodes.sort.uniq { |node| [node.x, node.y] }.size

module Day8
  module Part2
    def self.run(data)
      y_max = -1
      x_max = 0
      frequencies = {}
      data.each.with_index do |line, y|
        x_max = line.chars.length - 1
        line.chars.each_with_index do |char, x|
          next if char == '.'

          if frequencies[char].nil?
            frequencies[char] = [[x, y]]
          else
            frequencies[char] << [x, y]
          end
        end
        y_max += 1
      end

      results = {}
      frequencies.each do |freq, coords|
        results[freq] = []
        coords.combination(2).each do |pair|
          a, b = pair
          ax, ay = a
          bx, by = b

          diff_ax = ax - bx
          diff_ay = ay - by

          diff_bx = bx - ax
          diff_by = by - ay

          (1..26).each do |i|
            results[freq] << [[ax + (i * diff_bx), ay + (i * diff_by)], [bx + (i * diff_ax), by + (i * diff_ay)]]
          end
        end
      end
      results.values.flatten(2).uniq.select { |coord| coord[0] >= 0 && coord[0] <= x_max && coord[1] >= 0 && coord[1] <= y_max }.count
    end
  end
end

puts Day8::Part2.run(data)

__END__
..............U.............c.....3...............
.....p.........F..................................
.....m..7....................4x............3......
..e.............F..........c...YH..3..............
.......e...................................c..E..8
................a...U................8............
..............................4.F...8....x........
............7.....4............Hc..E.......x......
........p..............................E..........
.............U.e....................x....t........
.7..........................Z.H....g..............
.........7..m.....S.........................E.....
...F.....p...........6...SY.......................
.................6..k...................g.........
..........m......a........................g.......
.......M.......................................g..
..............a............Y....C........H........
....u.......6........a.........C.GY...............
.....M..................S......................2..
..........M........S.....................2........
........M.......................5.........z..f....
.....................................Z........t.2.
..........6.......................................
......................................G...........
.........................A.........G9....Z........
........................C.........................
.....k......................G......z..t...........
.......k......................zs....f........5...9
................h........................9....2...
.............h.....0...........f.....K..ZX........
..................................f...............
.......1....................9.........Xz..........
...............1......B.s......X..................
............h...............B.....................
..T.........k..................b..................
...............u..................................
.........u.............h..................0.......
..............y...................................
...............................t....X......5......
.................A............................5...
................u..................s..............
.T..........b....y................................
............y............................K........
..1...............................s....B..........
..............Ay.............B...P................
..........T.......................K...........0...
.............T..................P.........K.......
......A....P......................................
....b.........1...................................
.........b................................P.......